/**
 * Sprint API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Backlog from '../model/Backlog';
import Body6 from '../model/Body6';
import Body7 from '../model/Body7';
import Error from '../model/Error';
import InlineResponse200 from '../model/InlineResponse200';

/**
* Backlogs service.
* @module api/BacklogsApi
* @version 1.6.0
*/
export default class BacklogsApi {

    /**
    * Constructs a new BacklogsApi. 
    * @alias module:api/BacklogsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the backlogsGet operation.
     * @callback module:api/BacklogsApi~backlogsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all backlogs
     * Only admins can retrieve all backlogs.
     * @param {Object} opts Optional parameters
     * @param {module:api/BacklogsApi~backlogsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    backlogsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'sortBy': opts['sortBy'],
        'limit': opts['limit'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/backlogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the backlogsIdDelete operation.
     * @callback module:api/BacklogsApi~backlogsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a backlog
     * Logged in backlogs can delete only themselves. Only admins can delete other backlogs.
     * @param {module:api/BacklogsApi~backlogsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    backlogsIdDelete(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/backlogs/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the backlogsIdGet operation.
     * @callback module:api/BacklogsApi~backlogsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Backlog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a backlog
     * Logged in backlogs can fetch only their own backlog information.
     * @param {module:api/BacklogsApi~backlogsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Backlog}
     */
    backlogsIdGet(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Backlog;

      return this.apiClient.callApi(
        '/backlogs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the backlogsIdPatch operation.
     * @callback module:api/BacklogsApi~backlogsIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Backlog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a backlog
     * Logged in backlogs can only update their own information. Only admins can update other backlogs.
     * @param {module:api/BacklogsApi~backlogsIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Backlog}
     */
    backlogsIdPatch(body, id, callback) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Backlog;

      return this.apiClient.callApi(
        '/backlogs/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the backlogsPost operation.
     * @callback module:api/BacklogsApi~backlogsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Backlog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a backlog
     * User can create backlogs.
     * @param {module:api/BacklogsApi~backlogsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Backlog}
     */
    backlogsPost(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Backlog;

      return this.apiClient.callApi(
        '/backlogs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
