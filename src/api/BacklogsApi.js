/**
 * SprintService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Backlog from '../model/Backlog';
import Body6 from '../model/Body6';
import Body7 from '../model/Body7';
import Error from '../model/Error';
import InlineResponse200 from '../model/InlineResponse200';

/**
* Backlogs service.
* @module api/BacklogsApi
* @version 1.6.0
*/
export default class BacklogsApi {

    /**
    * Constructs a new BacklogsApi. 
    * @alias module:api/BacklogsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get all backlogs
     * Only admins can retrieve all backlogs.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Backlog name *
     * @param {String} opts.sortBy sort by query in the form of field:desc/asc (ex. name:asc)
     * @param {Number} opts.limit Maximum number of backlogs
     * @param {Number} opts.page Page number (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    backlogsGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'sortBy': opts['sortBy'],
        'limit': opts['limit'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/backlogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all backlogs
     * Only admins can retrieve all backlogs.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Backlog name *
     * @param {String} opts.sortBy sort by query in the form of field:desc/asc (ex. name:asc)
     * @param {Number} opts.limit Maximum number of backlogs
     * @param {Number} opts.page Page number (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    backlogsGet(opts) {
      return this.backlogsGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a backlog
     * Logged in backlogs can delete only themselves. Only admins can delete other backlogs.
     * @param {String} id Backlog id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    backlogsIdDeleteWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling backlogsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/backlogs/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a backlog
     * Logged in backlogs can delete only themselves. Only admins can delete other backlogs.
     * @param {String} id Backlog id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    backlogsIdDelete(id) {
      return this.backlogsIdDeleteWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a backlog
     * Logged in backlogs can fetch only their own backlog information.
     * @param {String} id Backlog id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Backlog} and HTTP response
     */
    backlogsIdGetWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling backlogsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Backlog;
      return this.apiClient.callApi(
        '/backlogs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a backlog
     * Logged in backlogs can fetch only their own backlog information.
     * @param {String} id Backlog id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Backlog}
     */
    backlogsIdGet(id) {
      return this.backlogsIdGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a backlog
     * Logged in backlogs can only update their own information. Only admins can update other backlogs.
     * @param {String} id Backlog id
     * @param {module:model/Body7} Body7 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Backlog} and HTTP response
     */
    backlogsIdPatchWithHttpInfo(id, Body7) {
      let postBody = Body7;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling backlogsIdPatch");
      }
      // verify the required parameter 'Body7' is set
      if (Body7 === undefined || Body7 === null) {
        throw new Error("Missing the required parameter 'Body7' when calling backlogsIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Backlog;
      return this.apiClient.callApi(
        '/backlogs/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a backlog
     * Logged in backlogs can only update their own information. Only admins can update other backlogs.
     * @param {String} id Backlog id
     * @param {module:model/Body7} Body7 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Backlog}
     */
    backlogsIdPatch(id, Body7) {
      return this.backlogsIdPatchWithHttpInfo(id, Body7)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a backlog
     * User can create backlogs.
     * @param {module:model/Body6} Body6 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Backlog} and HTTP response
     */
    backlogsPostWithHttpInfo(Body6) {
      let postBody = Body6;
      // verify the required parameter 'Body6' is set
      if (Body6 === undefined || Body6 === null) {
        throw new Error("Missing the required parameter 'Body6' when calling backlogsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Backlog;
      return this.apiClient.callApi(
        '/backlogs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a backlog
     * User can create backlogs.
     * @param {module:model/Body6} Body6 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Backlog}
     */
    backlogsPost(Body6) {
      return this.backlogsPostWithHttpInfo(Body6)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
