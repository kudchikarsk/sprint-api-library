/**
 * Sprint Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Body10 from '../model/Body10';
import Error from '../model/Error';
import InlineResponse2002 from '../model/InlineResponse2002';
import Invoice from '../model/Invoice';
import InvoiceEvent from '../model/InvoiceEvent';

/**
* Invoices service.
* @module api/InvoicesApi
* @version 1.6.0
*/
export default class InvoicesApi {

    /**
    * Constructs a new InvoicesApi. 
    * @alias module:api/InvoicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get all invoices
     * Logged in invoice can retrieve all invoices.
     * @param {String} organizationId invoice organizationId
     * @param {Object} opts Optional parameters
     * @param {String} opts.name invoice client name
     * @param {String} opts.status invoice status
     * @param {String} opts.description invoice project / description
     * @param {String} opts.sortBy sort by query in the form of field:desc/asc (ex. name:asc)
     * @param {Number} opts.limit Maximum number of invoices
     * @param {Number} opts.page Page number (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    invoicesGetWithHttpInfo(organizationId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling invoicesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'organizationId': organizationId,
        'name': opts['name'],
        'status': opts['status'],
        'description': opts['description'],
        'sortBy': opts['sortBy'],
        'limit': opts['limit'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all invoices
     * Logged in invoice can retrieve all invoices.
     * @param {String} organizationId invoice organizationId
     * @param {Object} opts Optional parameters
     * @param {String} opts.name invoice client name
     * @param {String} opts.status invoice status
     * @param {String} opts.description invoice project / description
     * @param {String} opts.sortBy sort by query in the form of field:desc/asc (ex. name:asc)
     * @param {Number} opts.limit Maximum number of invoices
     * @param {Number} opts.page Page number (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
     */
    invoicesGet(organizationId, opts) {
      return this.invoicesGetWithHttpInfo(organizationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all invoices
     * User can retrieve assigned invoices.
     * @param {String} invoiceId Invoice id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Invoice} and HTTP response
     */
    invoicesInvoiceIdGetWithHttpInfo(invoiceId) {
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling invoicesInvoiceIdGet");
      }

      let pathParams = {
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Invoice;
      return this.apiClient.callApi(
        '/invoices/{invoiceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all invoices
     * User can retrieve assigned invoices.
     * @param {String} invoiceId Invoice id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Invoice}
     */
    invoicesInvoiceIdGet(invoiceId) {
      return this.invoicesInvoiceIdGetWithHttpInfo(invoiceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a invoice event
     * User can create invoice event.
     * @param {module:model/Body10} body10 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InvoiceEvent} and HTTP response
     */
    invoicesPostWithHttpInfo(body10) {
      let postBody = body10;
      // verify the required parameter 'body10' is set
      if (body10 === undefined || body10 === null) {
        throw new Error("Missing the required parameter 'body10' when calling invoicesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InvoiceEvent;
      return this.apiClient.callApi(
        '/invoices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a invoice event
     * User can create invoice event.
     * @param {module:model/Body10} body10 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InvoiceEvent}
     */
    invoicesPost(body10) {
      return this.invoicesPostWithHttpInfo(body10)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
