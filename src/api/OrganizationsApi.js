/**
 * Sprint Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Body12 from '../model/Body12';
import Body13 from '../model/Body13';
import Error from '../model/Error';
import InlineResponse2003 from '../model/InlineResponse2003';
import Organization from '../model/Organization';

/**
* Organizations service.
* @module api/OrganizationsApi
* @version 1.6.0
*/
export default class OrganizationsApi {

    /**
    * Constructs a new OrganizationsApi. 
    * @alias module:api/OrganizationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get all organizations
     * Only admins can retrieve all organizations.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Organization name *
     * @param {String} opts.sortBy sort by query in the form of field:desc/asc (ex. name:asc)
     * @param {Number} opts.limit Maximum number of organizations
     * @param {Number} opts.page Page number (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response
     */
    organizationsGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'sortBy': opts['sortBy'],
        'limit': opts['limit'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;
      return this.apiClient.callApi(
        '/organizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all organizations
     * Only admins can retrieve all organizations.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Organization name *
     * @param {String} opts.sortBy sort by query in the form of field:desc/asc (ex. name:asc)
     * @param {Number} opts.limit Maximum number of organizations
     * @param {Number} opts.page Page number (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003}
     */
    organizationsGet(opts) {
      return this.organizationsGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a organization
     * Logged in organizations can delete only themselves. Only admins can delete other organizations.
     * @param {String} id Organization id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    organizationsIdDeleteWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organizationsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a organization
     * Logged in organizations can delete only themselves. Only admins can delete other organizations.
     * @param {String} id Organization id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    organizationsIdDelete(id) {
      return this.organizationsIdDeleteWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a organization
     * Logged in organizations can fetch only their own organization information.
     * @param {String} id Organization id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Organization} and HTTP response
     */
    organizationsIdGetWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organizationsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/organizations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a organization
     * Logged in organizations can fetch only their own organization information.
     * @param {String} id Organization id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Organization}
     */
    organizationsIdGet(id) {
      return this.organizationsIdGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a organization member
     * User can remove a organization member
     * @param {String} id Organization id
     * @param {String} userId User id to invite
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    organizationsIdInviteUserIdDeleteWithHttpInfo(id, userId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organizationsIdInviteUserIdDelete");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling organizationsIdInviteUserIdDelete");
      }

      let pathParams = {
        'id': id,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{id}/invite/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a organization member
     * User can remove a organization member
     * @param {String} id Organization id
     * @param {String} userId User id to invite
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    organizationsIdInviteUserIdDelete(id, userId) {
      return this.organizationsIdInviteUserIdDeleteWithHttpInfo(id, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Invite a organization member
     * User can invite organization members
     * @param {String} id Organization id
     * @param {String} userId User id to invite
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    organizationsIdInviteUserIdPostWithHttpInfo(id, userId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organizationsIdInviteUserIdPost");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling organizationsIdInviteUserIdPost");
      }

      let pathParams = {
        'id': id,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{id}/invite/{userId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Invite a organization member
     * User can invite organization members
     * @param {String} id Organization id
     * @param {String} userId User id to invite
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    organizationsIdInviteUserIdPost(id, userId) {
      return this.organizationsIdInviteUserIdPostWithHttpInfo(id, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a organization
     * Logged in organizations can only update their own information. Only admins can update other organizations.
     * @param {String} id Organization id
     * @param {module:model/Body13} Body13 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Organization} and HTTP response
     */
    organizationsIdPatchWithHttpInfo(id, Body13) {
      let postBody = Body13;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organizationsIdPatch");
      }
      // verify the required parameter 'Body13' is set
      if (Body13 === undefined || Body13 === null) {
        throw new Error("Missing the required parameter 'Body13' when calling organizationsIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/organizations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a organization
     * Logged in organizations can only update their own information. Only admins can update other organizations.
     * @param {String} id Organization id
     * @param {module:model/Body13} Body13 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Organization}
     */
    organizationsIdPatch(id, Body13) {
      return this.organizationsIdPatchWithHttpInfo(id, Body13)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a organization
     * User can create organizations.
     * @param {module:model/Body12} Body12 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Organization} and HTTP response
     */
    organizationsPostWithHttpInfo(Body12) {
      let postBody = Body12;
      // verify the required parameter 'Body12' is set
      if (Body12 === undefined || Body12 === null) {
        throw new Error("Missing the required parameter 'Body12' when calling organizationsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/organizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a organization
     * User can create organizations.
     * @param {module:model/Body12} Body12 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Organization}
     */
    organizationsPost(Body12) {
      return this.organizationsPostWithHttpInfo(Body12)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
